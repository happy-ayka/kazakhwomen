name: Upgrade Telar

on:
  workflow_dispatch:
    inputs:
      create_pr:
        description: 'Create pull request with changes'
        type: boolean
        default: true

permissions:
  contents: write
  issues: write

jobs:
  upgrade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyyaml pandas

      - name: Fetch latest upgrade scripts
        run: |
          echo "Fetching latest upgrade scripts from telar repository..."
          # Remove old scripts if they exist
          rm -rf scripts/
          # Fetch latest scripts from telar repo
          curl -L https://github.com/UCSB-AMPLab/telar/archive/refs/heads/main.tar.gz | tar xz --strip-components=1 telar-main/scripts
          echo "✓ Latest upgrade scripts fetched"

      - name: Check current version
        id: check_version
        run: |
          CURRENT_VERSION=$(python3 -c "import yaml; config=yaml.safe_load(open('_config.yml')); print(config.get('telar', {}).get('version', '0.2.0-beta'))")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Run upgrade script
        id: upgrade
        run: |
          python scripts/upgrade.py

          if [ -f UPGRADE_VERSION.txt ]; then
            VERSION=$(cat UPGRADE_VERSION.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Upgraded to version: $VERSION"
          else
            echo "No upgrade needed or upgrade failed"
            exit 1
          fi

      - name: Update version in _config.yml
        if: steps.upgrade.outputs.version != ''
        run: |
          python3 << 'EOF'
          import yaml

          with open('_config.yml', 'r') as f:
              config = yaml.safe_load(f)

          if 'telar' not in config:
              config['telar'] = {}

          config['telar']['version'] = "${{ steps.upgrade.outputs.version }}"
          config['telar']['release_date'] = "$(date +%Y-%m-%d)"

          with open('_config.yml', 'w') as f:
              yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
          EOF

      - name: Create upgrade branch
        if: steps.upgrade.outputs.version != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="upgrade-telar-${{ steps.upgrade.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "Upgrade Telar from ${{ steps.check_version.outputs.current_version }} to ${{ steps.upgrade.outputs.version }}"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: create_branch

      - name: Create upgrade issue
        if: steps.upgrade.outputs.version != ''
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Read the upgrade summary
          SUMMARY=$(cat UPGRADE_SUMMARY.md)

          # Get repository info
          REPO="${{ github.repository }}"
          BRANCH="${{ steps.create_branch.outputs.branch_name }}"
          VERSION="${{ steps.upgrade.outputs.version }}"
          FROM_VERSION="${{ steps.check_version.outputs.current_version }}"

          # Create issue body with instructions
          cat > issue_body.md << 'EOF'
          ## 🎉 Telar Upgrade Ready

          Your Telar site has been successfully upgraded from **$FROM_VERSION** to **$VERSION**.

          ### 📋 Upgrade Summary

          $SUMMARY

          ### 🔍 Review Changes

          View all changes in the upgrade branch:
          - **[Compare view]($COMPARE_URL)** - See exactly what changed
          - **Branch:** `$BRANCH`

          ### ✅ How to Apply This Upgrade

          Choose one of the following methods:

          #### Option 1: Create Pull Request (Recommended)
          1. Go to the [compare view]($COMPARE_URL)
          2. Click the green **"Create pull request"** button
          3. Review the changes one more time
          4. Click **"Merge pull request"** to apply the upgrade

          #### Option 2: Merge via Command Line
          ```bash
          git fetch origin
          git checkout main
          git merge origin/$BRANCH
          git push origin main
          ```

          #### Option 3: Merge on GitHub
          1. Go to your repository's **Branches** page
          2. Find the `$BRANCH` branch
          3. Click **"New pull request"** or use the merge button

          ### 📝 Manual Steps

          After merging, please check the upgrade summary above for any manual steps you may need to complete.

          ---

          This upgrade was performed automatically by the Telar upgrade workflow.
          EOF

          # Replace placeholders
          sed -i "s|\$FROM_VERSION|$FROM_VERSION|g" issue_body.md
          sed -i "s|\$VERSION|$VERSION|g" issue_body.md
          sed -i "s|\$BRANCH|$BRANCH|g" issue_body.md
          sed -i "s|\$COMPARE_URL|https://github.com/$REPO/compare/main...$BRANCH|g" issue_body.md
          sed -i "s|\$SUMMARY|$SUMMARY|g" issue_body.md

          # Create the issue
          gh issue create \
            --title "Upgrade Telar to $VERSION" \
            --body-file issue_body.md \
            --label "upgrade"

      - name: Output summary
        if: steps.upgrade.outputs.version != ''
        run: |
          echo "## ✅ Upgrade Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **From:** ${{ steps.check_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **To:** ${{ steps.upgrade.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ steps.create_branch.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "An issue has been created with upgrade details and merge instructions." >> $GITHUB_STEP_SUMMARY
          echo "Check the **Issues** tab to review and apply the upgrade." >> $GITHUB_STEP_SUMMARY
